(in-package #:lisp-tracer)

(defgeneric local-intersect (shape ray)
  (:documentation "Generic intersections for different shapes.")
  (:method ((sphere sphere) (ray ray))
    (let* ((sphere-to-ray (sub (ray-origin ray) (make-point 0.0 0.0 0.0)))
           (ray-direction (ray-direction ray))
           (a (dot ray-direction ray-direction))
           (b (mult 2.0 (dot ray-direction sphere-to-ray)))
           (c (sub (dot sphere-to-ray sphere-to-ray) 1.0))
           (discriminant (sub (mult b b)
                              (mult 4.0 (mult a c)))))
      (declare (type double-float discriminant a b c))
      (unless (< discriminant 0.0)
        (intersections (make-intersection (/ (- (- b) (sqrt discriminant))
                                             (* 2.0 a))
                                          sphere)
                       (make-intersection (/ (+ (- b) (sqrt discriminant))
                                             (* 2.0 a))
                                          sphere))))))

(defun normal-at (shape point)
  (declare (shape shape) (tuple point))
  (let* ((inverse-matrix (inverse (shape-transform shape)))
         (local-point (mult inverse-matrix point))
         (local-normal (local-normal-at shape local-point))
         (world-normal (mult (transpose inverse-matrix) local-normal)))
    (setf (tuple-w world-normal) 0.0)
    (normalize world-normal)))

(defgeneric local-normal-at (shape point)
  (:documentation "Generic normals for different shapes")
  (:method ((sphere sphere) (point tuple))
    (sub point (make-point 0.0 0.0 0.0))))
