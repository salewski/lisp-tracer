(in-package #:lisp-tracer)

(defun eq? (a b)
  (< (abs (- a b)) epsilon))

(defgeneric add (term1 term2)
  (:documentation "Adding datastructures together")
  (:method ((x double-float) (y double-float))
    (+ x y))
  (:method ((x tuple) (y tuple))
    (make-tuple
     :x (+ (tuple-x x) (tuple-x y))
     :y (+ (tuple-y x) (tuple-y y))
     :z (+ (tuple-z x) (tuple-z y))
     :w (+ (tuple-w x) (tuple-w y))))
  (:method ((x color) (y color))
    (make-color
     :red (+ (color-red x) (color-red y))
     :green (+ (color-green x) (color-green y))
     :blue (+ (color-blue x) (color-blue y)))))


(defgeneric sub (term1 term2)
  (:documentation "Subtracting datastructures")
  (:method ((x double-float) (y double-float))
    (- x y))
  (:method ((x tuple) (y tuple))
    (make-tuple
     :x (- (tuple-x x) (tuple-x y))
     :y (- (tuple-y x) (tuple-y y))
     :z (- (tuple-z x) (tuple-z y))
     :w (- (tuple-w x) (tuple-w y))))
  (:method ((x color) (y color))
    (make-color
     :red (- (color-red x) (color-red y))
     :green (- (color-green x) (color-green y))
     :blue (- (color-blue x) (color-blue y)))))

(defgeneric mult (term1 term2)
  (:documentation "Multiplying datastructures with scalar")
  (:method ((x double-float) (y double-float))
    (* x y))
  (:method ((x tuple) (y double-float))
    (make-tuple
     :x (* (tuple-x x) y)
     :y (* (tuple-y x) y)
     :z (* (tuple-z x) y)
     :w (* (tuple-w x) y)))
  (:method ((x color) (y double-float))
    (make-color
     :red (* (color-red x) y)
     :green (* (color-green x) y)
     :blue (* (color-blue x) y)))
  (:method ((x color) (y color))
    (make-color
     :red (* (color-red x) (color-red y))
     :green (* (color-green x) (color-green y))
     :blue (* (color-blue x) (color-blue y))))
  (:method ((a matrix) (b matrix))
    (create-matrix
     (+ (* (matrix-m00 a) (matrix-m00 b))
        (* (matrix-m01 a) (matrix-m10 b))
        (* (matrix-m02 a) (matrix-m20 b))
        (* (matrix-m03 a) (matrix-m30 b)))
     (+ (* (matrix-m00 a) (matrix-m01 b))
        (* (matrix-m01 a) (matrix-m11 b))
        (* (matrix-m02 a) (matrix-m21 b))
        (* (matrix-m03 a) (matrix-m31 b)))
     (+ (* (matrix-m00 a) (matrix-m02 b))
        (* (matrix-m01 a) (matrix-m12 b))
        (* (matrix-m02 a) (matrix-m22 b))
        (* (matrix-m03 a) (matrix-m32 b)))
     (+ (* (matrix-m00 a) (matrix-m03 b))
        (* (matrix-m01 a) (matrix-m13 b))
        (* (matrix-m02 a) (matrix-m23 b))
        (* (matrix-m03 a) (matrix-m33 b)))

     (+ (* (matrix-m10 a) (matrix-m00 b))
        (* (matrix-m11 a) (matrix-m10 b))
        (* (matrix-m12 a) (matrix-m20 b))
        (* (matrix-m13 a) (matrix-m30 b)))
     (+ (* (matrix-m10 a) (matrix-m01 b))
        (* (matrix-m11 a) (matrix-m11 b))
        (* (matrix-m12 a) (matrix-m21 b))
        (* (matrix-m13 a) (matrix-m31 b)))
     (+ (* (matrix-m10 a) (matrix-m02 b))
        (* (matrix-m11 a) (matrix-m12 b))
        (* (matrix-m12 a) (matrix-m22 b))
        (* (matrix-m13 a) (matrix-m32 b)))
     (+ (* (matrix-m10 a) (matrix-m03 b))
        (* (matrix-m11 a) (matrix-m13 b))
        (* (matrix-m12 a) (matrix-m23 b))
        (* (matrix-m13 a) (matrix-m33 b)))

     (+ (* (matrix-m20 a) (matrix-m00 b))
        (* (matrix-m21 a) (matrix-m10 b))
        (* (matrix-m22 a) (matrix-m20 b))
        (* (matrix-m23 a) (matrix-m30 b)))
     (+ (* (matrix-m20 a) (matrix-m01 b))
        (* (matrix-m21 a) (matrix-m11 b))
        (* (matrix-m22 a) (matrix-m21 b))
        (* (matrix-m23 a) (matrix-m31 b)))
     (+ (* (matrix-m20 a) (matrix-m02 b))
        (* (matrix-m21 a) (matrix-m12 b))
        (* (matrix-m22 a) (matrix-m22 b))
        (* (matrix-m23 a) (matrix-m32 b)))
     (+ (* (matrix-m20 a) (matrix-m03 b))
        (* (matrix-m21 a) (matrix-m13 b))
        (* (matrix-m22 a) (matrix-m23 b))
        (* (matrix-m23 a) (matrix-m33 b)))

     (+ (* (matrix-m30 a) (matrix-m00 b))
        (* (matrix-m31 a) (matrix-m10 b))
        (* (matrix-m32 a) (matrix-m20 b))
        (* (matrix-m33 a) (matrix-m30 b)))
     (+ (* (matrix-m30 a) (matrix-m01 b))
        (* (matrix-m31 a) (matrix-m11 b))
        (* (matrix-m32 a) (matrix-m21 b))
        (* (matrix-m33 a) (matrix-m31 b)))
     (+ (* (matrix-m30 a) (matrix-m02 b))
        (* (matrix-m31 a) (matrix-m12 b))
        (* (matrix-m32 a) (matrix-m22 b))
        (* (matrix-m33 a) (matrix-m32 b)))
     (+ (* (matrix-m30 a) (matrix-m03 b))
        (* (matrix-m31 a) (matrix-m13 b))
        (* (matrix-m32 a) (matrix-m23 b))
        (* (matrix-m33 a) (matrix-m33 b)))))
  (:method ((a matrix) (b tuple))
    (let ((h (tuple-x b))
          (j (tuple-y b))
          (k (tuple-z b))
          (l (tuple-w b)))
      (make-tuple
       :x (+ (* (matrix-m00 a) h)
             (* (matrix-m01 a) j)
             (* (matrix-m02 a) k)
             (* (matrix-m03 a) l))
       :y (+ (* (matrix-m10 a) h)
             (* (matrix-m11 a) j)
             (* (matrix-m12 a) k)
             (* (matrix-m13 a) l))
       :z (+ (* (matrix-m20 a) h)
             (* (matrix-m21 a) j)
             (* (matrix-m22 a) k)
             (* (matrix-m23 a) l))
       :w (+ (* (matrix-m30 a) h)
             (* (matrix-m31 a) j)
             (* (matrix-m32 a) k)
             (* (matrix-m33 a) l))))))

(defgeneric div (term1 term2)
  (:documentation "Dividing datastructures with scalar")
  (:method ((x double-float) (y double-float))
    (float (/ x y)))
  (:method ((x tuple) (y double-float))
    (make-tuple
     :x (float (/ (tuple-x x) y))
     :y (float (/ (tuple-y x) y))
     :z (float (/ (tuple-z x) y))
     :w (float (/ (tuple-w x) y)))))

(defgeneric equal? (a b)
  (:documentation "Checking for unsafe equality")
  (:method ((a number) (b number)) (eq? a b))
  (:method ((x tuple) (y tuple))
    (and (eq? (tuple-x x) (tuple-x y))
         (eq? (tuple-y x) (tuple-y y))
         (eq? (tuple-z x) (tuple-z y))
         (eq? (tuple-w x) (tuple-w y))))
  (:method ((x color) (y color))
    (and (eq? (color-red x) (color-red y))
         (eq? (color-green x) (color-green y))
         (eq? (color-blue x) (color-blue y))))
  (:method ((x matrix) (y matrix))
    (and
     (eq? (matrix-m00 x) (matrix-m00 y))
     (eq? (matrix-m01 x) (matrix-m01 y))
     (eq? (matrix-m02 x) (matrix-m02 y))
     (eq? (matrix-m03 x) (matrix-m03 y))

     (eq? (matrix-m10 x) (matrix-m10 y))
     (eq? (matrix-m11 x) (matrix-m11 y))
     (eq? (matrix-m12 x) (matrix-m12 y))
     (eq? (matrix-m13 x) (matrix-m13 y))

     (eq? (matrix-m20 x) (matrix-m20 y))
     (eq? (matrix-m21 x) (matrix-m21 y))
     (eq? (matrix-m22 x) (matrix-m22 y))
     (eq? (matrix-m23 x) (matrix-m23 y))

     (eq? (matrix-m30 x) (matrix-m30 y))
     (eq? (matrix-m31 x) (matrix-m31 y))
     (eq? (matrix-m32 x) (matrix-m32 y))
     (eq? (matrix-m33 x) (matrix-m33 y))))
  (:method ((x material) (y material))
    (and (equal? (material-color x) (material-color y))
         (eq? (material-ambient x) (material-ambient y))
         (eq? (material-diffuse x) (material-diffuse y))
         (eq? (material-specular x) (material-specular y))
         (eq? (material-shininess x) (material-shininess y)))))

(defgeneric neg (element)
  (:documentation "Negates provided value")
  (:method ((x double-float))
    (- x))
  (:method ((tup tuple))
    (make-tuple
     :x (- (tuple-x tup))
     :y (- (tuple-y tup))
     :z (- (tuple-z tup))
     :w (- (tuple-w tup)))))

(defun magnitude (vec)
  (let ((a (tuple-x vec))
        (b (tuple-y vec))
        (c (tuple-z vec))
        (d (tuple-w vec)))
    (sqrt
     (+ (* a a)
        (* b b)
        (* c c)
        (* d d)))))

(defun normalize (vec)
  (make-tuple
   :x (float (/ (tuple-x vec) (magnitude vec)))
   :y (float (/ (tuple-y vec) (magnitude vec)))
   :z (float (/ (tuple-z vec) (magnitude vec)))
   :w (float (/ (tuple-w vec) (magnitude vec)))))

(defun dot (a b)
  (float
   (+ (* (tuple-x a) (tuple-x b))
      (* (tuple-y a) (tuple-y b))
      (* (tuple-z a) (tuple-z b))
      (* (tuple-w a) (tuple-w b)))))

(defun cross (tuple-a tuple-b)
  (let ((a (tuple-x tuple-a))
        (b (tuple-y tuple-a))
        (c (tuple-z tuple-a))

        (d (tuple-x tuple-b))
        (e (tuple-y tuple-b))
        (f (tuple-z tuple-b)))
    (make-vec
     (- (* b f)
        (* c e))
     (- (* c d)
        (* a f))
     (- (* a e)
        (* b d)))))
